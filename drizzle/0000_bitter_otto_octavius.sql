-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."accountStatus" AS ENUM('ACTIVE', 'PENDING', 'ARCHIVED', 'SUSPENDED', 'UNVERIFIED');--> statement-breakpoint
CREATE TYPE "public"."user_role_type" AS ENUM('ADMIN', 'BROKER', 'INVESTOR', 'BORROWER', 'SUPERADMIN', 'PENDING');--> statement-breakpoint
CREATE TABLE "notes" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"title" text
);
--> statement-breakpoint
ALTER TABLE "notes" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "properties" (
	"id" serial PRIMARY KEY NOT NULL,
	"address" text NOT NULL,
	"ltv" numeric(5, 2) NOT NULL,
	"amount" integer NOT NULL,
	"list_date" timestamp with time zone NOT NULL,
	"region" varchar(10) NOT NULL,
	"img_urls" text,
	"property_type" varchar(50) NOT NULL,
	"interest_rate" numeric(5, 2) NOT NULL,
	"date_funded" date,
	"maturity_date" date,
	"lat_long" varchar(50),
	"prior_e" text,
	"mortgage_type" integer,
	"term" integer,
	"market_value" integer
);
--> statement-breakpoint
ALTER TABLE "properties" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "draft_listings" (
	"draft_listing_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"broker_account_id" uuid,
	"property_id" uuid,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "draft_listings" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "account_status" (
	"account_status_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"status" "accountStatus" DEFAULT 'PENDING' NOT NULL
);
--> statement-breakpoint
ALTER TABLE "account_status" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "pending_user" (
	"pending_user_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" uuid NOT NULL,
	"role_id" uuid NOT NULL,
	"first_name" text NOT NULL,
	"middle_name" text,
	"last_name" text NOT NULL,
	"profile_picture" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "pending_user" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "account" (
	"account_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" uuid NOT NULL,
	"first_name" text DEFAULT '' NOT NULL,
	"middle_name" text DEFAULT '',
	"last_name" text DEFAULT '' NOT NULL,
	"profile_picture" text DEFAULT '',
	"account_status" "accountStatus" DEFAULT 'PENDING'
);
--> statement-breakpoint
ALTER TABLE "account" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_roles" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"user_id" uuid NOT NULL,
	"role_id" bigint NOT NULL,
	CONSTRAINT "user_roles_id_key" UNIQUE("id"),
	CONSTRAINT "unique_user_role" UNIQUE("user_id","role_id")
);
--> statement-breakpoint
ALTER TABLE "user_roles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "roles" (
	"id" bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY (sequence name "roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"role_name" text NOT NULL,
	CONSTRAINT "roles_role_name_key" UNIQUE("role_name")
);
--> statement-breakpoint
ALTER TABLE "roles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "listings" (
	"listing_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"property_id" uuid,
	"account_id" uuid,
	"listed_date" date,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "listings" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "active_listings" (
	"active_listing_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"listing_id" uuid,
	"listing_date_active" timestamp with time zone NOT NULL
);
--> statement-breakpoint
ALTER TABLE "active_listings" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "property" (
	"property_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"property_type" text DEFAULT '' NOT NULL,
	"address" json NOT NULL,
	"region" text DEFAULT '' NOT NULL,
	"ltv" double precision DEFAULT '0' NOT NULL,
	"amount" double precision DEFAULT '0' NOT NULL,
	"mortgage_type" text DEFAULT '' NOT NULL,
	"interest_rate" double precision NOT NULL,
	"term" json NOT NULL,
	"prior_encumbrances" json NOT NULL,
	"estimated_fair_market_value" double precision NOT NULL,
	"imgs" text DEFAULT '' NOT NULL,
	"summary" text NOT NULL,
	"date_funded" date NOT NULL,
	"private_docs" text DEFAULT '' NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "property" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "saved_properties" (
	"saved_properties_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"account_id" uuid NOT NULL,
	"active_listing_id" uuid NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "saved_properties" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "archived_listings" (
	"archived_listing_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"listing_id" uuid NOT NULL,
	"archived_status" text NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "archived_listings" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "sold_listings" (
	"sold_listings_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"listing_id" uuid NOT NULL,
	"buyer_account_id" uuid NOT NULL,
	"finalized" boolean NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "sold_listings" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "draft_listings" ADD CONSTRAINT "draft_listings_broker_account_id_fkey" FOREIGN KEY ("broker_account_id") REFERENCES "public"."account"("account_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "draft_listings" ADD CONSTRAINT "draft_listings_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."property"("property_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "pending_user" ADD CONSTRAINT "pending_user_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "account" ADD CONSTRAINT "account_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "listings" ADD CONSTRAINT "listings_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."account"("account_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "listings" ADD CONSTRAINT "listings_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."property"("property_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "active_listings" ADD CONSTRAINT "active_listings_listing_id_fkey" FOREIGN KEY ("listing_id") REFERENCES "public"."listings"("listing_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "saved_properties" ADD CONSTRAINT "saved_properties_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."account"("account_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "saved_properties" ADD CONSTRAINT "saved_properties_active_listing_id_fkey" FOREIGN KEY ("active_listing_id") REFERENCES "public"."active_listings"("active_listing_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "archived_listings" ADD CONSTRAINT "archived_listings_listing_id_fkey" FOREIGN KEY ("listing_id") REFERENCES "public"."listings"("listing_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "sold_listings" ADD CONSTRAINT "sold_listings_buyer_account_id_fkey" FOREIGN KEY ("buyer_account_id") REFERENCES "public"."account"("account_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "sold_listings" ADD CONSTRAINT "sold_listings_listing_id_fkey" FOREIGN KEY ("listing_id") REFERENCES "public"."listings"("listing_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
CREATE INDEX "idx_list_date" ON "properties" USING btree ("list_date" timestamptz_ops);--> statement-breakpoint
CREATE INDEX "idx_property_type" ON "properties" USING btree ("property_type" text_ops);--> statement-breakpoint
CREATE INDEX "idx_region" ON "properties" USING btree ("region" text_ops);--> statement-breakpoint
CREATE INDEX "idx_role_id" ON "user_roles" USING btree ("role_id" int8_ops);--> statement-breakpoint
CREATE INDEX "idx_user_id" ON "user_roles" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "notes" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from notes" ON "notes" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into notes" ON "notes" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update notes" ON "notes" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from notes" ON "notes" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "properties" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from properties" ON "properties" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into properties" ON "properties" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update properties" ON "properties" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from properties" ON "properties" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from draft_listings" ON "draft_listings" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into draft_listings" ON "draft_listings" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update draft_listings" ON "draft_listings" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from draft_listings" ON "draft_listings" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from account_status" ON "account_status" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into account_status" ON "account_status" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update account_status" ON "account_status" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from account_status" ON "account_status" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from pending_user" ON "pending_user" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into pending_user" ON "pending_user" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update pending_user" ON "pending_user" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from pending_user" ON "pending_user" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from account" ON "account" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into account" ON "account" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update account" ON "account" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from account" ON "account" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from user_roles" ON "user_roles" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into user_roles" ON "user_roles" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update user_roles" ON "user_roles" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from user_roles" ON "user_roles" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from roles" ON "roles" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into roles" ON "roles" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update roles" ON "roles" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from roles" ON "roles" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from listings" ON "listings" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into listings" ON "listings" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update listings" ON "listings" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from listings" ON "listings" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from active_listings" ON "active_listings" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into active_listings" ON "active_listings" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update active_listings" ON "active_listings" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from active_listings" ON "active_listings" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from property" ON "property" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into property" ON "property" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update property" ON "property" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from property" ON "property" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from saved_properties" ON "saved_properties" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into saved_properties" ON "saved_properties" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update saved_properties" ON "saved_properties" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from saved_properties" ON "saved_properties" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from archived_listings" ON "archived_listings" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into archived_listings" ON "archived_listings" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update archived_listings" ON "archived_listings" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from archived_listings" ON "archived_listings" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to select from sold_listings" ON "sold_listings" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Allow authenticated users to insert into sold_listings" ON "sold_listings" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to update sold_listings" ON "sold_listings" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow authenticated users to delete from sold_listings" ON "sold_listings" AS PERMISSIVE FOR DELETE TO "authenticated";
*/